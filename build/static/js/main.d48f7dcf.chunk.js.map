{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","components/Header.js","containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","_ref","name","email","id","react_default","a","createElement","className","src","concat","alt","CardList","robots","map","user","i","components_Card","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","children","ErrorBoundary","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","hasError","error","info","setState","Component","Header","nextProps","nextState","App","onRequestRobots","_this$props","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","components_Header","components_SearchBox","src_components_Scroll","components_ErrorBoundary","components_CardList","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","err","Boolean","window","location","hostname","match","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","arguments","length","undefined","action","objectSpread","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","es","src_containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d48f7dcf.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = ({ name, email, id }) => {\n  return (\n    <div className='bg-light-blue dib br3 pa3 ma2 grow bw2 shadow-3 tc'>\n      <img src={`https://robohash.org/${id}?200x200`} alt=\"feafea\"/>\n      <div>\n        <h2>{name}</h2>\n        <p>{email}</p>\n      </div>\n    </div>\n  );\n}\n\nexport default Card\n","import React from 'react';\nimport Card from './Card'\n\nconst CardList = ({ robots }) => {\n  return (\n    <div>\n      {robots.map((user, i) => <Card key={i} id={robots[i].id} name={robots[i].name} email={robots[i].email} />)}\n    </div>\n  );\n}\n\nexport default CardList\n\n","import React from 'react';\n\nconst SearchBox = ({searchfield, searchChange}) => {\n  return (\n    <div className='pa2'>\n    <input\n      className='pa3 ba b-red bg-lightest-blue'\n      type=\"search\"\n      placeholder='Search Your robot'\n    onChange={searchChange}/>\n    </div>\n  );\n}\n\nexport default SearchBox\n","import React from 'react';\nimport './Scroll.css'\n\n\nconst Scroll = (props) => {\n  return (\n    <div className='scroll'>\n      {props.children}\n    </div>\n  );\n};\n\nexport default Scroll\n","import React, { Component } from 'react';\n\nclass ErrorBoundary extends Component {\n    constructor (props) {\n        super(props);\n        this.state = {\n            hasError: false\n        }\n    }\n\n    componentDidCatch(error, info) {\n        this.setState({ hasError: true })\n    }\n\n    render() {\n        if (this.state.hasError === true) {\n            return <h1>Something went wrong</h1>\n        } else {\n        return this.props.children\n        }\n    }\n}\n\nexport default ErrorBoundary\n","import React, { Component } from 'react';\n\n\nclass Header extends Component {\n\n  shouldComponentUpdate(nextProps, nextState) {\n    return false;\n  }\n\n  render() {\n    return <h1 className='f2'>Robot App With React</h1>\n  }\n}\n\n\nexport default Header\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport CardList from '../components/CardList'\nimport SearchBox from '../components/SearchBox'\n// import {robots} from './robots'\nimport './App.css'\nimport Scroll from '../components/Scroll'\nimport ErrorBoundary from '../components/ErrorBoundary'\nimport { setSearchfield, requestRobots } from '../actions'\nimport Header from '../components/Header'\n\nconst mapStateToProps = state => {\n  return {\n    searchField: state.searchRobots.searchField,\n    robots: state.requestRobots.robots,\n    isPending: state.requestRobots.isPending,\n    error: state.requestRobots.error\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onSearchChange: event => dispatch(setSearchfield(event.target.value)),\n    onRequestRobots: () => dispatch(requestRobots())\n  }\n}\n\nclass App extends Component {\n\n  componentDidMount() {\n    this.props.onRequestRobots()\n  }\n\n  render() {\n    const { searchField, onSearchChange, robots, isPending } = this.props\n    const filteredRobots =  robots.filter(robot => robot.name.toLowerCase().includes(searchField.toLowerCase()))\n    if(isPending) {\n      return <h1 className='tc'>Loading</h1>\n    } else {\n      return  (\n        <div className='tc'>\n          <Header />\n          <SearchBox searchChange={onSearchChange} />\n          <Scroll>\n            <ErrorBoundary>\n              <CardList robots={filteredRobots} />\n            </ErrorBoundary>\n          </Scroll>\n        </div>\n      );\n    }\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App)\n","import {\n  CHANGE_SEARCHFIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED\n} from \"./constants\";\n\nexport const setSearchfield = text => ({\n    type: CHANGE_SEARCHFIELD,\n    payload: text\n})\n\n\nexport const requestRobots = () => (dispatch) => {\n  dispatch({ type: REQUEST_ROBOTS_PENDING });\n  fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\n    .catch(err => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: err }))\n}\n","export const CHANGE_SEARCHFIELD = 'CHANGE_SEARCHFIELD';\n\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';\n\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\n  CHANGE_SEARCHFIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED\n} from \"./constants\";\n\nconst initialStateSearch = {\n    searchField: ''\n}\n\nexport const searchRobots = (state=initialStateSearch, action={}) => {\n    switch (action.type) {\n        case CHANGE_SEARCHFIELD:\n        return { ...state, searchField: action.payload }\n        default:\n            return state;\n    }\n}\n\nconst initialStateRobots = {\n  isPending: false,\n  robots: [],\n  error: ''\n}\n\nexport const requestRobots = (state=initialStateRobots, action) => {\n  switch (action.type) {\n    case REQUEST_ROBOTS_PENDING:\n      return { ...state, isPending: true }\n    case REQUEST_ROBOTS_SUCCESS:\n      return { ...state, robots: action.payload, isPending: false }\n    case REQUEST_ROBOTS_FAILED:\n      return { ...state, error: action.payload,  isPending: false }\n    default:\n      return state;\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger'\nimport thunkMiddleware from 'redux-thunk'\nimport 'tachyons';\nimport './index.css';\n\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport { searchRobots, requestRobots } from \"./reducers\";\n\nconst logger = createLogger()\n\nconst rootReducer = combineReducers({searchRobots, requestRobots})\n\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger))\n\nReactDOM.render(<Provider>\n                    <App store={store} />\n                </Provider>,\n                document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}